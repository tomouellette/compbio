for (x in permute$string) {
countString <- str_count(data, x)
tableString <- data.table(gene = i,
string = x,
count = countString,
length = geneLength,
frequency = countString/geneLength)
countTable <- rbind(countTable, tableString)
}
}
countTable
corrCombos <- combn(list.files(), 2)
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB)
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
}
corrTable
outputValue
corrCombos <- combn(list.files(), 2)
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB)
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
corrTable
permute <- c("A", "G", "C", "T")
permute <- data.table(permutations(permute, wordcount, replace = TRUE))
permute$strings <- apply(permute[,1:wordcount] , 1, paste, collapse = "")
countTable <- data.table()
for (i in list.files()) {
data <- readr::read_file(i)
data <- gsub("\n", "", data)
geneLength <- nchar(data)
for (x in permute$string) {
countString <- str_count(data, x)
tableString <- data.table(gene = i,
string = x,
count = countString,
length = geneLength,
frequency = countString/geneLength)
countTable <- rbind(countTable, tableString)
}
}
corrCombos <- combn(list.files(), 2)
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB)
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
corrTable
corrCombos
permute <- c("A", "G", "C", "T")
permute <- data.table(permutations(permute, wordcount, replace = TRUE))
permute$strings <- apply(permute[,1:wordcount] , 1, paste, collapse = "")
countTable <- data.table()
for (i in list.files()) {
data <- readr::read_file(i)
data <- gsub("\n", "", data)
geneLength <- nchar(data)
for (x in permute$string) {
countString <- str_count(data, x)
tableString <- data.table(gene = i,
string = x,
count = countString,
length = geneLength,
frequency = countString/geneLength)
countTable <- rbind(countTable, tableString)
}
}
corrCombos <- t(combn(list.files(), 2))
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB)
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
corrTable
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson")
heatmapMatrix
?dcast()
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = TRUE)
heatmapMatrix
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = "pearson")
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson")
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix
library(corrplot)
library(tibble)
install.packages("corrplot")
library(corrplot)
library(tibble)
heatmapPlot <- corrplot(heatmapMatrix)
?corrplot
heatmapPlot <- corrplot(heatmapMatrix, order = "original")
heatmapMatrix
?dcast()
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 0)
heatmapMatrix
typeof(heatmapMatrix)
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
typeof(heatmapMatrix)
heatmapMatrix
heatmapPlot <- corrplot(heatmapMatrix)
?corrplot
heatmapPlot <- corrplot(heatmapMatrix, order = "alphabet")
heatmapMatrix
permute <- c("A", "G", "C", "T")
permute <- data.table(permutations(permute, wordcount, replace = TRUE))
permute$strings <- apply(permute[,1:wordcount] , 1, paste, collapse = "")
countTable <- data.table()
for (i in list.files()) {
data <- readr::read_file(i)
data <- gsub("\n", "", data)
geneLength <- nchar(data)
for (x in permute$string) {
countString <- str_count(data, x)
tableString <- data.table(gene = i,
string = x,
count = countString,
length = geneLength,
frequency = countString/geneLength)
countTable <- rbind(countTable, tableString)
}
}
corrCombos <- t(combn(list.files(), 2))
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB)
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 0)
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
heatmapPlot <- corrplot(heatmapMatrix, order = "alphabet")
heatmapMatrix
setwd("~/Downloads/assignmentOne")
library(dplyr)
library(data.table)
library(stringr)
library(arrangements)
library(corrplot)
library(tibble)
permute <- c("A", "G", "C", "T")
permute <- data.table(permutations(permute, wordcount, replace = TRUE))
permute$strings <- apply(permute[,1:wordcount] , 1, paste, collapse = "")
countTable <- data.table()
for (i in list.files()) {
data <- readr::read_file(i)
data <- gsub("\n", "", data)
geneLength <- nchar(data)
for (x in permute$string) {
countString <- str_count(data, x)
tableString <- data.table(gene = i,
string = x,
count = countString,
length = geneLength,
frequency = countString/geneLength)
countTable <- rbind(countTable, tableString)
}
}
corrCombos <- t(combn(list.files(), 2))
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB)
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 0)
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
heatmapPlot <- corrplot(heatmapMatrix, order = "alphabet")
heatmapPlot <- corrplot(heatmapMatrix)
library(pheatmap)
heatmapPlot <- pheatmap(heatmapMatrix)
heatmapPlot <- pheatmap(heatmapMatrix, cluster.rows = FALSE, cluster_cols = FALSE)
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
)
?pheatmap()
corrTable
addReverse <- data.table(geneA = corrTable$geneB,
geneB = corrTable$geneA,
pearson = corrTable$pearson)
corrTable <- rbind(corrTable, addReverse)
corrTable
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson")
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
)
corrTable <- rbind(corrTable, addReverse)
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 1)
corrCombos <- t(combn(list.files(), 2))
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB)
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
addReverse <- data.table(geneA = corrTable$geneB,
geneB = corrTable$geneA,
pearson = corrTable$pearson)
corrTable <- rbind(corrTable, addReverse)
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 1)
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
)
?cor.test
corrCombos <- t(combn(list.files(), 2))
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB, method = "pearson")
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
addReverse <- data.table(geneA = corrTable$geneB,
geneB = corrTable$geneA,
pearson = corrTable$pearson)
corrTable <- rbind(corrTable, addReverse)
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 1)
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE)
?pheatmap
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
breaks = c(0, 1))
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
breaks = seq(0, 1, 0.01))
range(corrTable$pearson)
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE)
library(tidyverse)
library(cluster)
library(factoextra)
install.packages("cluster")
install.packages("cluster")
install.packages("factoextra")
library(tidyverse)
library(cluster)
library(factoextra)
distance <- get_dist(heatmapMatrix)
distance
addReverse <- data.table(geneA = corrTable$geneB,
geneB = corrTable$geneA,
pearson = corrTable$pearson)
corrTable <- rbind(corrTable, addReverse)
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 1)
library(dplyr)
library(data.table)
library(stringr)
library(arrangements)
library(pheatmap)
library(tibble)
permute <- c("A", "G", "C", "T")
permute <- data.table(permutations(permute, wordcount, replace = TRUE))
permute$strings <- apply(permute[,1:wordcount] , 1, paste, collapse = "")
countTable <- data.table()
for (i in list.files()) {
data <- readr::read_file(i)
data <- gsub("\n", "", data)
geneLength <- nchar(data)
for (x in permute$string) {
countString <- str_count(data, x)
tableString <- data.table(gene = i,
string = x,
count = countString,
length = geneLength,
frequency = countString/geneLength)
countTable <- rbind(countTable, tableString)
}
}
corrCombos <- t(combn(list.files(), 2))
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB, method = "pearson")
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
addReverse <- data.table(geneA = corrTable$geneB,
geneB = corrTable$geneA,
pearson = corrTable$pearson)
corrTable <- rbind(corrTable, addReverse)
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 1)
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE)
library(tidyverse)
library(cluster)
library(factoextra)
distance <- get_dist(heatmapMatrix)
distance
fviz_dist(distance)
k2 <- kmeans(heatmapMatrix, centers = 2, nstart = 25)
fviz_cluster(k2, data = heatmapMatrix)
k2 <- kmeans(heatmapMatrix, centers = 3, nstart = 25)
fviz_cluster(k2, data = heatmapMatrix)
distance <- get_dist(heatmapMatrix, method = "pearson")
fviz_dist(distance)
k2 <- kmeans(heatmapMatrix, centers = 3, nstart = 25)
fviz_cluster(k2, data = heatmapMatrix)
k2 <- kmeans(heatmapMatrix, centers = 8, nstart = 25)
fviz_cluster(k2, data = heatmapMatrix)
k2 <- kmeans(heatmapMatrix, centers = 3, nstart = 25)
fviz_cluster(k2, data = heatmapMatrix)
k2 <- kmeans(heatmapMatrix, centers = 5, nstart = 25)
fviz_cluster(k2, data = heatmapMatrix)
k2 <- kmeans(heatmapMatrix, centers = 3, nstart = 25)
fviz_cluster(k2, data = heatmapMatrix)
plot(buildClust, cex = 0.6, hang = -1)
# Heirarchical clustering
build <- dist(heatmapMatrix, method = "euclidean")
buildClust <- hclust(build, method = "complete")
plot(buildClust, cex = 0.6, hang = -1)
# Heirarchical clustering
build <- dist(heatmapMatrix, method = "pearson")
?dist()
# Heirarchical clustering
build <- dist(heatmapMatrix, method = "pearson")
# Heirarchical clustering
build <- dist(heatmapMatrix, method = "manhattan")
buildClust <- hclust(build, method = "complete")
plot(buildClust, cex = 0.6, hang = -1)
correlationTable <- function(directory, nucleotideWidth = 3) {
setwd("~/Downloads/assignmentOne")
library(dplyr)
library(data.table)
library(stringr)
library(arrangements)
library(pheatmap)
library(tibble)
# 1. Build all possible nucleotide sequences of length k (nucleotideWidth); standard is 3
permute <- c("A", "G", "C", "T")
permute <- data.table(permutations(permute, wordcount, replace = TRUE))
permute$strings <- apply(permute[,1:wordcount] , 1, paste, collapse = "")
# 2. Build a frequency table for each of the genes analyzed
countTable <- data.table()
for (i in list.files()) {
data <- readr::read_file(i)
data <- gsub("\n", "", data)
geneLength <- nchar(data)
for (x in permute$string) {
countString <- str_count(data, x)
tableString <- data.table(gene = i,
string = x,
count = countString,
length = geneLength,
frequency = countString/geneLength)
countTable <- rbind(countTable, tableString)
}
}
# 3. Build a correlation table for each of the genes analyzed
corrCombos <- t(combn(list.files(), 2))
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB, method = "pearson")
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
addReverse <- data.table(geneA = corrTable$geneB,
geneB = corrTable$geneA,
pearson = corrTable$pearson)
corrTable <- rbind(corrTable, addReverse)
return(corrTable)
}
correlationHeatmap <- function(corrTable) {
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 1)
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE)
return(heatmapPlot)
}
testTable <- correlationTable(directory = "~/Downloads/assignmentOne", nucleotideWidth = 3)
testTable
correlationHeatmap(testTable)
View(updatingEdgeList)
correlationTable <- function(directory, nucleotideWidth = 3) {
setwd(directory)
library(dplyr)
library(data.table)
library(stringr)
library(arrangements)
library(pheatmap)
library(tibble)
# 1. Build all possible nucleotide sequences of length k (nucleotideWidth); standard is 3
permute <- c("A", "G", "C", "T")
permute <- data.table(permutations(permute, wordcount, replace = TRUE))
permute$strings <- apply(permute[,1:wordcount] , 1, paste, collapse = "")
# 2. Build a frequency table for each of the genes analyzed
countTable <- data.table()
for (i in list.files()) {
data <- readr::read_file(i)
data <- gsub("\n", "", data)
geneLength <- nchar(data)
for (x in permute$string) {
countString <- str_count(data, x)
tableString <- data.table(gene = i,
string = x,
count = countString,
length = geneLength,
frequency = countString/geneLength)
countTable <- rbind(countTable, tableString)
}
}
# 3. Build a correlation table for each of the genes analyzed
corrCombos <- t(combn(list.files(), 2))
corrTable <- data.table()
for (i in 1:dim(corrCombos)[1]) {
freqA <- filter(countTable, gene == corrCombos[[i, 1]])$frequency
freqB <- filter(countTable, gene == corrCombos[[i, 2]])$frequency
correlationValue <- cor.test(freqA, freqB, method = "pearson")
correlationValue <- correlationValue$estimate[[1]]
outputValue <- data.table(geneA = corrCombos[i,1],
geneB = corrCombos[i,2],
pearson = correlationValue)
corrTable <- rbind(corrTable, outputValue)
}
addReverse <- data.table(geneA = corrTable$geneB,
geneB = corrTable$geneA,
pearson = corrTable$pearson)
corrTable <- rbind(corrTable, addReverse)
return(corrTable)
}
correlationHeatmap <- function(corrTable) {
heatmapMatrix <- dcast(corrTable, geneA ~ geneB, value.var = "pearson", fill = 1)
heatmapMatrix <- column_to_rownames(heatmapMatrix, "geneA")
heatmapMatrix <- as.matrix(heatmapMatrix)
heatmapPlot <- pheatmap(heatmapMatrix,
cluster_rows = FALSE,
cluster_cols = FALSE)
return(heatmapPlot)
}
# Test
testTable <- correlationTable(directory = "~/Downloads/assignmentOne", nucleotideWidth = 3)
correlationHeatmap(testTable)
testTable <- correlationTable(directory = "~/github/compbio/horizontalGeneTransferDetection", nucleotideWidth = 3)
correlationHeatmap(testTable)
testTable <- correlationTable(directory = "~/Documents/github/compbio/horizontalGeneTransferDetection", nucleotideWidth = 3)
testTable <- correlationTable(directory = "~/Documents/github/compbio/horizontalGeneTransferDetection/sampleGenes", nucleotideWidth = 3)
correlationHeatmap(testTable)
testTable
